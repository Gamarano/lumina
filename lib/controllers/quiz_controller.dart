import 'package:flutter/material.dart';
import '../models/quiz_model.dart';
import '../services/gemini_service.dart';

/// Controlador para gerenciar o estado do quiz com IA infinita
class QuizController with ChangeNotifier {
  final GeminiService _geminiService = GeminiService();
  
  List<QuizQuestion> _questions = [];
  int _currentQuestionIndex = 0;
  int _sessionScore = 0; // Pontua√ß√£o apenas desta sess√£o
  int _streak = 0;
  int _totalCorrect = 0;
  int _totalAnswered = 0;
  bool _isLoading = false;
  QuestionType _selectedType = QuestionType.both;
  bool _needsMoreQuestions = false;
  
  List<QuizQuestion> get questions => _questions;
  int get currentQuestionIndex => _currentQuestionIndex;
  int get sessionScore => _sessionScore;
  int get streak => _streak;
  int get totalCorrect => _totalCorrect;
  int get totalAnswered => _totalAnswered;
  bool get isLoading => _isLoading;
  QuestionType get selectedType => _selectedType;
  
  // Propriedades corrigidas
  bool get isQuizFinished => false; // Quiz nunca termina - √© infinito!
  bool get isLastQuestion => _currentQuestionIndex == _questions.length - 1;
  bool get needsMoreQuestions => _needsMoreQuestions;
  
  QuizQuestion? get currentQuestion {
    if (_currentQuestionIndex < _questions.length) {
      return _questions[_currentQuestionIndex];
    }
    return null;
  }

  /// Carrega quest√µes iniciais do Gemini AI
  Future<void> loadQuestions(QuestionType type, int numberOfQuestions) async {
    _isLoading = true;
    _needsMoreQuestions = false;
    notifyListeners();
    
    try {
      print('üöÄ CARREGANDO QUEST√ïES DA IA: $numberOfQuestions do tipo $type');
      _questions = await _geminiService.generateQuestions(
        type: type,
        count: numberOfQuestions,
      );
      
      _currentQuestionIndex = 0;
      _sessionScore = 0;
      _streak = 0;
      _totalCorrect = 0;
      _totalAnswered = 0;
      _selectedType = type;
      
      print('‚úÖ QUEST√ïES CARREGADAS: ${_questions.length}');
      
      if (_questions.isEmpty) {
        throw Exception('Nenhuma quest√£o foi gerada');
      }
      
      notifyListeners();
      
    } catch (e) {
      print('‚ùå ERRO IA: $e');
      print('üîÑ USANDO QUEST√ïES LOCAIS...');
      _loadLocalQuestions(type);
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// Carrega MAIS quest√µes mantendo o estado atual
  Future<void> loadMoreQuestions() async {
    if (_isLoading) return;
    
    _isLoading = true;
    _needsMoreQuestions = false;
    notifyListeners();
    
    try {
      print('üîÑ CARREGANDO MAIS QUEST√ïES...');
      final newQuestions = await _geminiService.generateQuestions(
        type: _selectedType,
        count: 5, // Sempre carrega 5 novas quest√µes
      );
      
      _questions.addAll(newQuestions);
      print('‚úÖ MAIS QUEST√ïES ADICIONADAS: ${newQuestions.length} (Total: ${_questions.length})');
      
      notifyListeners();
      
    } catch (e) {
      print('‚ùå ERRO AO CARREGAR MAIS QUEST√ïES: $e');
      // N√£o faz fallback aqui - deixa o usu√°rio continuar com as quest√µes atuais
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// Fallback com quest√µes locais
  void _loadLocalQuestions(QuestionType type) {
    _questions = [
      QuizQuestion(
        id: 'local_1',
        question: 'Qual √© a caracter√≠stica principal do gr√°fico de uma fun√ß√£o linear?',
        options: [
          '√â sempre uma reta',
          '√â sempre uma par√°bola', 
          'Pode ter formato de onda',
          'Sempre corta o eixo x em dois pontos'
        ],
        correctAnswerIndex: 0,
        explanation: 'Fun√ß√µes lineares t√™m a forma y = ax + b e seu gr√°fico √© sempre uma linha reta.',
        type: QuestionType.linear,
      ),
      QuizQuestion(
        id: 'local_2',
        question: 'O que o coeficiente "a" representa em uma fun√ß√£o quadr√°tica?',
        options: [
          'Controla a concavidade da par√°bola',
          'Define onde corta o eixo y',
          'Determina a inclina√ß√£o da reta',
          'N√£o tem influ√™ncia no gr√°fico'
        ],
        correctAnswerIndex: 0,
        explanation: 'Em y = ax¬≤ + bx + c, o coeficiente "a" define se a par√°bola abre para cima (a > 0) ou para baixo (a < 0).',
        type: QuestionType.quadratic,
      ),
      QuizQuestion(
        id: 'local_3',
        question: 'Em uma fun√ß√£o linear y = 2x + 3, qual √© o intercepto no eixo y?',
        options: ['3', '2', '0', '-3'],
        correctAnswerIndex: 0,
        explanation: 'O coeficiente b (3) indica onde a reta corta o eixo y, ou seja, no ponto (0, 3).',
        type: QuestionType.linear,
      ),
      QuizQuestion(
        id: 'local_4',
        question: 'Qual afirma√ß√£o √© verdadeira sobre fun√ß√µes quadr√°ticas?',
        options: [
          'Sempre possuem um v√©rtice',
          'S√£o sempre sim√©tricas ao eixo x',
          'N√£o cortam o eixo y',
          'S√£o fun√ß√µes de primeiro grau'
        ],
        correctAnswerIndex: 0,
        explanation: 'Toda fun√ß√£o quadr√°tica possui um v√©rtice que √© seu ponto de m√°ximo ou m√≠nimo.',
        type: QuestionType.quadratic,
      ),
      QuizQuestion(
        id: 'local_5',
        question: 'Se uma fun√ß√£o linear tem inclina√ß√£o positiva, o que acontece com y quando x aumenta?',
        options: [
          'y tamb√©m aumenta',
          'y diminui',
          'y permanece constante', 
          'y se torna negativo'
        ],
        correctAnswerIndex: 0,
        explanation: 'Inclina√ß√£o positiva significa que a fun√ß√£o √© crescente: quando x aumenta, y tamb√©m aumenta.',
        type: QuestionType.linear,
      ),
    ];
    
    // Filtra por tipo se necess√°rio
    if (type != QuestionType.both) {
      _questions = _questions.where((q) => q.type == type).toList();
    }
    
    print('üìö QUEST√ïES LOCAIS CARREGADAS: ${_questions.length}');
    notifyListeners();
  }

  /// Verifica a resposta do usu√°rio
  void checkAnswer(int selectedIndex, Function(int, int, int) onScoreUpdate) {
    if (currentQuestion == null) return;
    
    final isCorrect = currentQuestion!.isCorrect(selectedIndex);
    int pointsEarned = 0;
    int streakBonus = 0;
    
    if (isCorrect) {
      pointsEarned = 10;
      _streak++;
      _totalCorrect++;
      
      // B√¥nus por sequ√™ncia de 10 acertos
      if (_streak >= 10 && _streak % 10 == 0) {
        streakBonus = 50;
        pointsEarned += streakBonus;
      }
    } else {
      pointsEarned = -5;
      _streak = 0;
    }
    
    _sessionScore += pointsEarned;
    _totalAnswered++;
    
    // Verifica se precisa carregar mais quest√µes
    if (_currentQuestionIndex >= _questions.length - 3) {
      _needsMoreQuestions = true;
    }
    
    // Chama callback para atualizar no UserController
    onScoreUpdate(pointsEarned, _streak, _sessionScore);
    
    notifyListeners();
  }

  /// Avan√ßa para a pr√≥xima quest√£o
  void nextQuestion() {
    if (_currentQuestionIndex < _questions.length - 1) {
      _currentQuestionIndex++;
    } else {
      // Se for a √∫ltima quest√£o, recome√ßa do in√≠cio (quiz infinito)
      _currentQuestionIndex = 0;
    }
    
    // Carrega mais quest√µes se necess√°rio
    if (_needsMoreQuestions && !_isLoading) {
      loadMoreQuestions();
    }
    
    notifyListeners();
  }

  /// Reinicia o quiz mantendo as quest√µes atuais
  void resetQuiz() {
    _currentQuestionIndex = 0;
    _sessionScore = 0;
    _streak = 0;
    _totalCorrect = 0;
    _totalAnswered = 0;
    _needsMoreQuestions = false;
    notifyListeners();
  }

  /// Carrega um novo conjunto de quest√µes
  void loadNewQuestions(QuestionType type, int numberOfQuestions) {
    _questions.clear();
    loadQuestions(type, numberOfQuestions);
  }

  /// Pula para a pr√≥xima quest√£o sem responder
  void skipQuestion() {
    nextQuestion();
    _streak = 0; // Reseta a sequ√™ncia ao pular
    notifyListeners();
  }
}